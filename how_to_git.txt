동빈나
깃허브 사용법 DAY1
링크: https://www.youtube.com/watch?v=ys0lVeTHl7c&list=PLRx0vPvlEmdD5FLIdwTM4mKBgyjv4no81&index=15

깃허브 시작.
깃 다운
git config --global user.name ~~(내 닉네임)
git config --global user.email ~~(내 메일주소)
git clone ~~(내 github 주소 ~~.git)
git add ~(파일 이름)
git commit -m "~~(저장할때 그 관련 정보?)"
git push

다른 사람 git 가져오는 법
git fetch
git merge

두개 합쳐서 git pull
저장소: repositary(repo)

git status: 상태 확인 명령어

git reset ~~(파일명) : add 해서 staging area에 올라간 파일 다시 리셋
git add . 이렇게 올리면 수정 파일이 모두 staging area에 올라감

git checkout -- ~~(파일명) : status 통해 알게된 업데이트 항목을 원래 상태(이전 변경 전)로 돌리는 것
git commit --amend : 커밋 메시지 내용을 수정하도록 하는것
 
git reset --hard ~~(commit 한 파일의 주소같은거 ex. e431f23wsaa2341k321bnk4)
: 이때의 버전으로 파일을 돌리고, 그 이후 버전은 전부 폐기. 그래서 hard라고 지칭하는듯 하다.

soft 버전도 있다. 이건 이전 버전으로 바꾼 후에도 이후 버전을 폐기하지 않는다. 스테이징 상태로 되돌리는 것이라 한다. 
Head만 이동시키는 것?

mixed 버전도 있는데, 이건 커밋과 스테이징을 하기 전 상태로 이동하는 것이라고 한다... 뭔 뜻이지..?
리셋 뒤에 아무것도 오지 않으면 default 값으로 mixed 버전이 된다.

git reset ~~을 하고 난 뒤에 git push 하게 되면 에러가 뜬다.
git push -f 를 하면 강제로 깃허브 저장소를 로컬 저장소에 맞추게 할 수 있다.
 
git commit --amend
: 이걸 입력하면 커밋 메시지 수정이 가능하다. -m " " 안에 들어가는거 수정.
윈도우에 입력하고 난 뒤에 어떤 페이지가 뜨는데, 그 상태(유닉스 에디터)에서 a를 누르면 
수정모드로 바뀌게 된다. 

안에 들어가는 내용을 바꾼 후 ESC 버튼을 누른 후 [:wq!] 대괄호 제외를 입력하면 저장이 된다.

Git branch 사용법
branch: 깃에서 각기 다른 기능을 개발할 수 있도록 하는 것.
서로 다른 브랜치는 작업함에 있어서 서로 영향을 주지 않는다.
마스터 브랜치, 디벨롭 브랜치, 디버그 브렌치 대표적으로 이런게 있다.
마스터 브랜치는 일반적으로 안정적으로 배포가 가능한 안정성이 잡힌 버전이다.
통합 브랜치: 배포가 가능한 수준의 브랜치로 일반적으로 마스터 브랜치를 의미함
토픽 브랜치: 특정한 기능을 위해 만들어진 브랜치로 일반적으로 마스터 브랜치 이외의 다른 브랜치르 의미함.

git branch
: 현재 브랜치가 어떻게 있는지 확인 가능함.
git branch develop
: develop 브랜치 생성됨.

git checkout ~~(브랜치 명)
: 브랜치를 이동시키는 것 같음. 현재 바라보는 브랜치

그 상태에서 파일을 편집하고 작업을 시행하면 된다.
그 후 add 수행, commit 수행하면 되는데, 그러면 git에 반영이 되지 않는다.
반영하는 방법은

git checkout master
:이것을 통해 시점을 마스터 브랜치로 바꾼 후
git merge develop
: 이것을 통해 master과 develop이 머지가 된다.
마지막으로 git push를 하면 통합된 것이 적용된다.

브랜치를 다 쓰면,
git branch -d ~~(브랜치 명)
을 쓰면 브랜치게 제거된다.

브랜치간의 충돌을 해결하는 방법
develop 브랜치에서 코드를 넣고, add, commit 진행 후
master 브랜치로 시점을 변경한 뒤 master 브랜치에서 코드를 추가하고 merge를 진행한다.
그러면 conflict가 발생한다. 그 파일을 열어보면 어떤 부분이 충돌이 일어났는지 보여준다.
 
충돌된 부분을 수정하고, 다시 git add . , git commit -m " ~ "
하면 충돌이 일어나지 않고, git push하면 끝이난다.


GIT 원격 저장소 관리하기(Remote Repository)

git remote
: 원격 저장소 이름을 보여줌, 주로 origin 이라는 이름으로 되어있음.

git remote show origin
: 현재 원격 저장소의 상태? 정보를 보여줌

git remote add ~~(원격 저장소로 쓸 이름 아무거나) ~~(원격 저장소로 쓸 git 주소 ~~.git)
원격 저장소를 다른 주소와 연결?? 이해가 잘 안되네..

git remote -v
: 전체 원격 주소 확인

git remote rename ~~(기존 원격 이름) ~~(새로운 이름)
: 원격 주소 이름 변경하기

git remote rm ~~(원격저장소 이름)
: 원격 저장소 삭제하기.



Git에서 Log 다루는 방법.

git log
: 커밋 기록들 볼 수 있다.

git log --stat
: 해당 파일에 얼마나 많은 라인이 추가가 되었는지 등 알 수 있다.

git log -p -3(이건 뭔 뜻일까?)
: 커밋에 적용된 자세한 사항, 위에서부터 세개만.

git log --pretty=oneline
: 커밋 내역이 한줄로 표시가 된다. 자세한 내용은 없지만 한눈에 볼 수 있어 많이 사용된다.

git log --pretty=format:"%h -> %an, %ar : %s" --graph
커밋 내역을 출력할때, 포맷 양식을 정해주는 것.
%h는 커밋할때 해쉬값을 출력, %an은 작성자 네임(alter name??), %ar: 작성 날짜(alter r???) ,%s 커밋 주제: 커밋할때 넣어준 값들 -m "" 안에 넣어준거
-- graph는 그래프가 들어가게 한것.



Readme.md 사용법

md: markdown 약어
#을 5단계까지 나누어 적은 숫자의 #일수록 크게 출력


파일 안에 
```~~(내가 사용할 언어명)
~~~(코드들)
~~~
~~~
```
이렇게 코드를 넣는다.
```는 1 왼쪽 버튼 특수기호

링크 생성방법

[링크 이름](URL 주소)
넣으면 된다. but 중괄호와 소괄호 사이 공백 있으면 안된다.

순서 없는 목록은 *을 통해 만들 수 있다.
ex) 
* git1
* git2
	*git2-1
	*git2-2

이런 식으로 진행된다.

인용구문 사용법은 > 꺽쇠 사용
> ~~

테이블 생성법
ex)
이름|영어|수학|과학
---|---|---|---|
이종현|94|92|90|

이렇게 생성한다.

강조 표시는 **~~** 별 두개로 감싸서 하고, 
중간선은 ~~문장~~ 물결로 감싸서 표시한다.



GIT Archive(아카이브) 명령으로 소스코드만 압축하기
: .git이란 폴더를 제외한 다른 소스들을 압축할 수 있게 만드는 코드

git archive --format=zip(파일 속성) master(브랜치명) -o Master.zip(파일명)
git archive --format=zip(파일 속성) master(브랜치명) -o ../Master.zip(파일명)(앞에 ../넣으면 그 앞의 폴더에 집 생성)


Rebase 명령으로 특정한 커밋을 수정 or 삭제하기
git  init : 파일 안 초기화 하는거같음

git rebase -i HEAD~3
: 가장 최근부터 3개까지 commit 내역을 보겠다.?

그 다음 나오는 수많은 커멘드 키들을 보고 활용하면 된다.
commit은 활용하고, 커밋 메시지를 수정하므로 pick 지우고 reword 쓴 후 :wq! 하면 됨
그 후 원하는대로 편집하고 동일하게 :wq! 하면 된다.

커밋한게 너무 많을때는, 특정 커밋의 주소? (e24312jh312hj123hj 이런거) 넣으면 그 위쪽 커밋을 모두 보인다는 점이 있다.
ex)
git rebase -i n2ji2nio2n3o2gvy2i

커밋을 삭제하고 싶을 경우는 동일하게
git rebase -i HEAD~3
치고 난 뒤 pick을 drop으로 바꾸고 :wq! 하고 나오면 된다.
하지만 여러사람이 프로젝트 하는 경우 충돌이 일어날 수 있기에 막 삭제는 비추.

git rebase는 명령어가 매우 많기에 개인적으로 공부를 더 하는것을 추천한다.



Git config 환경설정 알아보기
최신 리눅스는 git이 깔려있다.. 왜지?
git config --list
: 현재 깃 설정이 어떻게 되어있는지 알 수 있다.

git config --global user.name(user.email) "~~(이름이나 이메일)"

git init
: 하나의 깃 프로젝트를 만들기

특정 커밋을 수정하고 싶다면 그 커밋 이전 버전의 커밋의 해쉬값을 복사한 뒤
git rebase -i ~~(해쉬값)
그러면 rebase 에디터가 열린다.
수정을 원하는 커밋에 pick -> edit 으로 수정한뒤 :wq!로 나온다.
GIT_COMMITER_DATE="Oct 1 10:00:00 2018 +0000" git commit --amend --no-edit --date "Oct 1 10:00:00 2018 +0000" 
: 2018년 10월 1일 10시로 커밋 시간을 수정 - 요일에 대한 정보를 넣지 않아도 자동으로 됨.

그 후
git rebase --continue
: 그 옵션 변경한 것을 저장, 반영한다는 것


두번째 방법은
git filter 방법인데.
git filter-branch -f(강제로 수행하게 하는거) --env-filter \
'if [ $GIT_COMMIT = ~~(해쉬값) ]
then 
export GIT_AUTHOR_DATE="MON OCT 1 10:00:00 2018 +0000"
export GIT_COMMITER_DATE="MON OCT 1 10:00:00 2018 +0000" 
fi'

이렇게 수정하면 된다. 프로젝트가 커질수록 부하가 커진다.
if문 중간에 들어가는 공백 space가 없으면 오류가 걸리니 주의.

중간의 커밋 날짜를 바꾸면 그 이후 커밋들의 해쉬값이 전부 바뀐다. 

깃 commiter를 수정하는 방법도 동일하다.
귀찮으니 url:
https://www.youtube.com/watch?v=ys0lVeTHl7c&list=PLRx0vPvlEmdD5FLIdwTM4mKBgyjv4no81&index=15
10:15로 이동해서 보면될듯 하다.

새로운 repo를 git에서 만든 후 
git remote add origin ~~(git 주소 ~~.git)
: 원격 뭐시기로 설정.

git push
: 뭐지
 
git push --set-upstream origin master
: 뭘까










